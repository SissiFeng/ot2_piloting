name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:latest
        env:
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests
      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB: test_db
        MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        MQTT_BROKER: ${{ secrets.MQTT_BROKER }}
        MQTT_USERNAME: ${{ secrets.MQTT_USERNAME }}
        MQTT_PASSWORD: ${{ secrets.MQTT_PASSWORD }}
      run: |
        pytest

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run linters
      run: |
        black --check .
        isort --check-only .
        pylint app tests
        mypy app

  docker:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        build-args: |
          MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          MQTT_BROKER=${{ secrets.MQTT_BROKER }}
          MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}
          MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Create .env file
      run: |
        echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "MQTT_BROKER=${{ secrets.MQTT_BROKER }}" >> .env
        echo "MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}" >> .env
        echo "MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}" >> .env
        echo "GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}" >> .env 